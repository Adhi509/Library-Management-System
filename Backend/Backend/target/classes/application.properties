#spring.application.name=Backend
# -- MySQL Database Configuration --

# 1. Database URL
# This tells Spring Boot where to find your database.
# "jdbc:mysql://" is the standard prefix.
# "localhost:3306" is the default host and port for a local MySQL server.
# "/library_db" is the name of your database schema. You must create this schema in MySQL first.
# "createDatabaseIfNotExist=true" is a handy parameter that creates the database if it's missing.
# "useSSL=false" disables SSL, which is fine for local development.
# "serverTimezone=UTC" prevents timezone-related errors.
spring.datasource.url=jdbc:mysql://localhost:3306/library_db?createDatabaseIfNotExist=true&useSSL=false&serverTimezone=UTC

# 2. Database Username
# The username you use to log in to your MySQL server.
# The default is often "root".
spring.datasource.username=root

# 3. Database Password
# The password for the username above.
# Replace "your_password" with your actual MySQL password.
spring.datasource.password=root

# 4. (Optional but Recommended) JPA/Hibernate Settings
# This tells Hibernate (the JPA provider) which SQL "dialect" to use.
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# This is the most powerful setting.
# "update" tells Hibernate to read your @Entity classes (like User, Book)
# and automatically add/modify your database tables to match them.
# This saves you from writing SQL to create your tables.
# Other values: "create" (drops and re-creates) or "validate" (checks if they match).
spring.jpa.hibernate.ddl-auto=update

# This prints the actual SQL queries Hibernate runs to the console.
# It's very useful for debugging!
spring.jpa.show-sql=true
# JWT Secret Key - CHANGE THIS to a long, random string
#app.jwt-secret=a-very-long-and-secure-secret-key-for-my-library-project
app.jwt-secret=ThisIsMyVeryLongAndVerySecretKeyForMyLibraryProject123456789
# JWT Expiration time in milliseconds (e.g., 7 days)
app.jwt-expiration-ms=604800000
# Sets the port to 8081
server.port=8085
@PostMapping("/login")
public ResponseEntity<?> loginUser(@RequestBody LoginDto loginDto) {
    try {
        String token = authService.login(loginDto);
        return ResponseEntity.ok(new JwtAuthResponse(token));
    } catch (Exception e) {
        e.printStackTrace(); // \uD83D\uDC48 will print full error in Eclipse console
        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
                .body("Login failed: " + e.getMessage());
    }
}
